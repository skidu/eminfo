#!/bin/bash
#
#
# Description	: pluginable platform written by perl/shell for linux ops.
# Config	: conf/.eminfo.ini
# Pidfile	: /var/run/eminfo.pid
#
# Creation Date : 2012-01-15
#
# Author	: <zhangguangzheng@eyou.net> <zhang.elinks@gmail.com>
#
# HomePage	: https://github.com/sunshine0137/eminfo.git
# 
# Usage		: --help
#
#


# === SET ${PATH}
#
export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"

# === SET ${BASE_DIR}   Defination is very important here, or this script won't
#                       get config file, function file and other related files.
#                       Now you would like to exec this scripts anywhere.
#
# BASE_DIR=$(cd "$(dirname "$0")" && pwd)
BASE_DIR="/usr/local/eminfo"

# === Turn Off Job Control
#
set +m

# === LOAD INCLUDE FILE
#
if [ -f ${BASE_DIR}/bin/include -a -s ${BASE_DIR}/bin/include ]; then
	# eval | sh | bash | source | . ${BASE_DIR}/bin/include
  	source ${BASE_DIR}/bin/include 2>&1
	rc=$?
	[ "$rc" != "0" ] && {
		echo "load include file failed with status $rc"
		exit 1
	}
else
  	echo "${BASE_DIR}/bin/include not exist or empty. exit" 
	exit 1
fi


### Help
##
show_help() {
cat << EOF

  $(echo_green "Options:")
	help					stuff you are reading
  	version					print version
	basedir					print basedir
	status					print eminfo status
	start   				start eminfo daemon
	stop    				stop eminfo daemon
	precheck				check system environment on start
	checkconf    	[-v]			check config file validity on start
	reload					reload include file (not config file) on fly
	makedir		[-c]			create basic directories
	takesnap				create system snapshot once
	list         	[plugin]		list plugin's schedule stat, (default list all)
	init	     	plugin			reset plugin's schedul stat, [all] for every plugin
	report       	plugin			report plugin's last result, [all] for every plugin
	enable       	plugin			enable plugin (change plugin config enable=yes)
	disable      	plugin			disable plugin (change plugin config enable=no)
	run		plugin			run plugin once and format output on terminal
	view		plugin [key]		print config->value, [all] for every plugin
	config					help stuff about eminfo config-*
	config-help				help stuff about eminfo config-* (same as above)
	?					help stuff about short args
EOF
}

show_confhelp() {
cat << EOF

  $(echo_green "Options:")
	config-help				help stuff about config you are reading
	config-view  	plugin key		print config value, [all] for every plugin
  	config-add   	plugin key value  	add config and set value for plugin
	config-del   	plugin key		delete config for plugin
	config-update 	plugin key value	update config value for plugin
EOF
}

### Example
##
show_example() {
cat << EOF

  $(echo_green "Example:")
	eminfo  help
	eminfo  version
	eminfo  basedir
	eminfo  precheck
	eminfo  checkconf [-v]
	eminfo	makedir  [-c]
	eminfo  takesnap
	eminfo  reload
	eminfo  start | stop | status | list
        eminfo  list     	pop_svr
	eminfo  init     	sysload
	eminfo  report   	sysload
	eminfo  enable   	sysload
	eminfo  disable  	sysload
	eminfo  run		sysload
	eminfo  view		sysload
	eminfo  view		sysload enable
	eminfo  config
	eminfo  config-help

EOF
}

show_confexample() {
cat << EOF

  $(echo_green "Example:")
	eminfo  config
	eminfo  config-help
	eminfo  config-view     pop_svr
	eminfo  config-view     pop_svr comment
	eminfo  config-add	pop_svr time_out 5
	eminfo  config-update	pop_svr time_out 10
	eminfo  config-del	pop_svr time_out 

EOF
}

### Tips
##
show_shorttips() {
cat << EOF

  $(echo_green "ShortTips:")
	help		=> h
	version		=> v
	basedir		=> b
	precheck        => p 
	checkconf	=> c
	makedir		=> m
	takesnap	=> t
	status          => s 
	list            => l	( ln le lr li )
	init            => i 
	report		=> R	( Re Rr Ri )
	run		=> r
	enable		=> e
	disable		=> d
	config-view 	=> v 
	config-add	=> a
	config-update	=> u

  $(echo_green "ShortTips Example:")
        eminfo  h
        eminfo  v
	eminfo  b
        eminfo  p 
        eminfo  c 
	eminfo	m
	eminfo  t
        eminfo  s 
        eminfo  l  [ln|le|lr|li]
        eminfo  i  pop_svr | all | a
        eminfo  R  pop_svr | all | a  [Re|Rr|Ri]
        eminfo  r  pop_svr
        eminfo  e  pop_svr
        eminfo  d  pop_svr
        eminfo  v  pop_svr | all | a
	eminfo  v  pop_svr enable
	eminfo  a  pop_svr enable yes
	eminfo  u  pop_svr enable no

EOF
}

### Show eminfo status
# Return Code:  0 1 2 3	   running | dead | dead with pid left | fake?
show_status() {
  if [ -f "${PID_FILE}" -a -s "${PID_FILE}" ]; then
	read pid < "${PID_FILE}"
	if [ -z "${pid//[0-9]}" -a -d "/proc/${pid}" ]; then    ###  numberic => running
		local cmdline=$(cat /proc/${pid}/cmdline 2>&-)
		[ "$(sub_str "${cmdline}" "eminfo")" == "yes" ] && {    ### cmdline contains "eminfo" ==> eminfo running
			echo_green "eminfo (pid: ${pid}) running ..." ; echo
			return 0
		} || {
			echo_yellow "eminfo (pid: ${pid}) running ... but seems fake?  [CMD: "${cmdline}"]" ; echo  ### fake?
			return 3
 		}
	else
		echo_yellow "eminfo dead, but pid file: ${PID_FILE} left dead." ; echo  ### not numberic ==> dead and pidfile left
		return 2
	fi
  else
  	echo_yellow "eminfo dead." ; echo  ### PID_FILE not exists ==> dead
	return 1
  fi
}

### Start eminfo
##
start_core_cron() {

local result=  rc=
if [ -e "${PID_FILE}" ]; then   ## exit while pid file exist
	echo_yellow pid file: ${PID_FILE} already exist. && echo && show_status
	return 1
else
	write_log -f "${EMINFO_LOG}" "S0000000 EMINFO starting ..."

	# === PRE CHECK ON Start
	echo -en "1. prechecking envrioment      ... "
	result=$( eval ${PRECHECK_SH} 2>&1 )
	rc=$?
	if [ "$rc" != "0" ]; then
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script precheck return failed[rc=${rc}]. exit"
  		echo -e "\nPreCheck Result: Sorry, Current Enviroment is NOT Suitable to Run EMINFO \n" 
  		echo -e "${result}"
  		exit 1
	else
		echo -e "[$(echo_green "succeed!")]"
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script precheck return succeed[rc=${rc}]. continue..."
	fi

	# === CHECK id/name/receviers
	echo -en "2. verifying id/name/receviers ... "
	eminfo_id=$(get_eminfo_id)
	if [ "${eminfo_id}" == "0000000000" ]; then
        	. ${SETINIT_SH} rpminit
	fi
	eminfo_name=$(get_global_name)
	if [ "${eminfo_name}" == "eminfo_ops.eyou.net" ]; then
        	. ${SETINIT_SH}
	fi
	default_receviers=$(get_mail_receviers default)
		if [ "${default_receviers}" == "root_bbk@126.com" ]; then
        	. ${SETINIT_SH}
	fi
  	echo -e "[$(echo_green "succeed!")]"

	# === CHECK CONFIG FILE ON Start
	echo -en "3. checking config file        ... "
	result=$( eval ${CHECKCONF_SH} 2>&1 )
	rc=$?
	if [ "$rc" == "2" ]; then	# crit => exit
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script checkconf return failed[rc=${rc}]. exit"
  		echo -e "\nCheck Config Result: Sorry, Config File Contains Some Mistakes \n"
  		echo -e "${result}"
  		exit 1
	elif [ "$rc" == "1" ]; then	# warn => print warnnings, continue
		echo -e "[$(echo_yellow "warnning!")]"
		echo -e "${result}"
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script checkconf return succeed[rc=${rc}]. continue..."
	elif [ "$rc" == "0" ]; then	# succ => continue
		echo -e "[$(echo_green "succeed!")]"
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script checkconf return succeed[rc=${rc}]. continue..."
	fi

	# === MAKEDIR ON Start
	echo -en "4. creating directories        ... "
	result=$( eval ${MAKEDIR_SH} 2>&1 )
	rc=$?
	if [ "$rc" != "0" ]; then
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script makedir return failed[rc=${rc}]. exit"
		echo -e "\nCreate Directory Result: Sorry, Some Mistakes Occured. \n"
		echo -e "${result}"
		exit 1
	else
		echo -e "[$(echo_green "succeed!")]"
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script makedir return succeed[rc=${rc}]. continue..."
	fi

	# === DIRECTORY CHECK ON Start
	echo -en "5. checking directories        ... "
	result=$( eval "${MAKEDIR_SH} -c" 2>&1 )
	rc=$?
	if [ "$rc" != "0" ]; then
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script makedir -c return failed[rc=${rc}]. exit"
  		echo -e "\nDirCheck Result: Sorry, Directories not prepared \n"
  		echo -e "${result}\n"
  		echo -e "Try to Run: ${MAKEDIR_SH}\n"
  		exit 1
	else
		echo -e "[$(echo_green "succeed!")]"
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO script makedir -c return succeed[rc=${rc}]. continue..."
	fi

	# === Execute Inner Plugins ON Start
	echo -en "6. running inner plugins       ... "
	for plugin_name in eminfo_clear_overdue eminfo_log_rotate
	do
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO executing inner plugins [${plugin_name}] ..."
		process_inner_plugin "${plugin_name}" "startrun"   # startrun: no need to un_lock
	done
	echo -e "[$(echo_green "succeed!")]"
	write_log -f "${EMINFO_LOG}" "S0000000 EMINFO inner plugins execution done. details in ${INNER_LOG##*/}."
	
	echo -en "7. starting eminfo cron        ... "
	write_log -f "${EMINFO_LOG}" "S0000000 EMINFO starting eminfo core cron... "
	{ while : ; do
		
		### trap signal HUP to reload bin/include
		trap '  write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::Caught:::SIGHUP, Reloading..."
			source ${BASE_DIR}/bin/include 1>/dev/null 2>&1
			[ $? == "0" ] && {
				write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::RELOADED"
			} || {
				write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::RELOAD-FAILD"
			}
	   	' 1

		### trap signal TERM to clean up and exit
		trap '  write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::Caught:::SIGTERM, Shuting Down..." 
			list_running_plugin_section | while read rp
			do
				write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO try to stop running plugin: [${rp}]"
				stop_single_plugin "${rp}"
				clear_dead_lock_pid "${rp}"			
			done
			rm -f "${PID_FILE}" 1>&- 2>&-
			write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::EXIT"
			exit 1
		' 15

		### trap signal ERR to catch unsucceed function or command
		trap ' write_log -f "${ERRLOG}" "TRAPERROR [LINE:$LINENO] exited with status: $?" 
		' ERR

		### Important !!!  
		### [wait] can NOT be placed in  "list|while ... done"  struct  !!!
		### as wait will lead to eminfo haning up.
		# clear_dead_lock_pid
		# wait 

		list_enabled_plugin_section | while read plugin_name
		do
			clear_dead_lock_pid "${plugin_name}"
			if [ "$(time2run_ornot "${plugin_name}")" == "yes" ]; then
				if [ ! -s "${RUN_DIR}/${plugin_name}.pid" ]; then
					add_runlock_on_pid_notexist ${plugin_name}
					[ "$?" == "0" ] && {
						if [ -z "$( echo "${plugin_name}" | grep -E -o "^eminfo_" )" ]; then
							process_plugin ${plugin_name} &
							_pid=$!
							echo "${_pid}" > "${RUN_DIR}/${plugin_name}.pid"
						else
							process_inner_plugin ${plugin_name} &
							_pid=$!
							echo "${_pid}" > "${RUN_DIR}/${plugin_name}.pid"
						fi
					}
				else
					check_runlock_on_pid_exist ${plugin_name}
					[ "$?" == "4" ] && {
						if [ -z "$( echo "${plugin_name}" | grep -E -o "^eminfo_" )" ]; then
                                                        process_plugin ${plugin_name} &
							_pid=$!
                                                        echo "${_pid}" > "${RUN_DIR}/${plugin_name}.pid"
						else
                                                        process_inner_plugin ${plugin_name} &
							_pid=$!
                                                        echo "${_pid}" > "${RUN_DIR}/${plugin_name}.pid"
						fi
					}
				fi
			fi
		done

		### sleep for a while.
		INTERVAL=$( read_eminfo_config global scan_interval )
		[ -z "${INTERVAL}" -o ! -z "${INTERVAL//[0-9]}" ] && INTERVAL=5
		sleep ${INTERVAL}

	done 
	} >> "${EMINFO_LOG}" 2>&1  &   ### running as daemon

	### save daemon pid
	echo $! > ${PID_FILE}
	echo -e "[$(echo_green "succeed!")]"
	write_log -f "${EMINFO_LOG}" "S0000000 EMINFO start finished, pid=[$!]"
fi 

}


### Stop eminfo
##
stop_core_cron() {
  local status=  rps=

  echo -en "trying to stop eminfo ... "
  status=$( show_status 2>&1 )
  if [ "$?" == "0" ]; then   ### is running    status: fake? is dangerous ==> SKIP
  	write_log -f "${EMINFO_LOG}" "S0000000 EMINFO stopping..."

		# 1. first stop core cron
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO 1 => stop eminfo core cron"
		stopps_by_pidfile ${PID_FILE}

		# 2. then stop all running plugins
		rps="$(list_running_plugin_section | tr '\n' ' ')"
		write_log -f "${EMINFO_LOG}" "S0000000 EMINFO 2 => stop all of running plugins: [${rps}]"
		for p in `echo "${rps}"`
  		do
			stop_single_plugin "${p}"
			clear_dead_lock_pid "${p}"
  		done

	echo_green " [OK]"; echo
	write_log -f "${EMINFO_LOG}" "S0000000 EMINFO 3 => stop eminfo done"
  else
	echo_yellow " [SKIP]" ; echo
	echo "${status}"
  fi
}


### Send single HUP to reload bin/include.
##
reload_core_cron(){
  local status= pid=
  echo_green trying to reload eminfo include file: bin/include ...
  status=$( show_status 2>&1 )
  if [ "$?" == "0" ]; then   ### eminfo is running      status: fake? is DANGEROUS ! ==> SKIP
  	read pid < "${PID_FILE}"
	write_log -f "${EMINFO_LOG}" "R0000000 EMINFO Deamon is Running, PID: [${pid}]"
	write_log -f "${EMINFO_LOG}" "R0000000 EMINFO Reloading Include File, Sending Signal 1 to EMINFO Daemon: [${pid}]"
	kill -1 "${pid}" 2>&-   ### send signal 1 to eminfo daemon.
	echo_green "  [OK]"; echo
	return 0
  else
	echo_red  "  [SKIP]"; echo 
	echo "${status}"
  fi
}

### List all plugin status
##
list_core_cron() {
  # clear_dead_lock_pid   # function list_plugin_section() two slow
  list_plugin_status all
}




###################################  Main Body ####################################
### Process Input Arguments
#echo $#
#echo $*
case "$#" in 
"1")
	case "$1" in
	"help"|"h")
		show_help		
		show_example			;;
	"version"|"v")
		echo "${EMINFO_VERSION}"	;;
	"basedir"|"b")
		echo "${BASE_DIR}"		;;
	"start")
		start_core_cron			;;
	"stop")
		stop_core_cron 			;;
	"status"|"s")
		show_status			;;
	"list"|"l")
		show_status
		list_core_cron			;;
	"ln")
		list_plugin_section | tr ' ' '\n'
						;;
	"le")
		list_plugin_status $(list_enabled_plugin_section)
						;;
	"lr")
		list_plugin_status $(list_running_plugin_section)
						;;
	"li")
		list_plugin_status $(list_inner_plugin_section)
						;;
	"Re")
		for s in `list_enabled_plugin_section`
		do
			. ${REPORT_SH} "${s}"
		done
						;;
	"Rr")
		for s in `list_running_plugin_section`
		do
			. ${REPORT_SH} "${s}"
		done
						;;
	"Ri")
		for s in `list_inner_plugin_section`
		do
			. ${REPORT_SH} "${s}"
		done
						;;
	"precheck"|"p")
		. ${PRECHECK_SH}		;;
	"checkconf"|"c")
		. ${CHECKCONF_SH}		;;
	"makedir"|"m")
		. ${MAKEDIR_SH}			;;
	"takesnap"|"t")
		. ${TAKESNAP_SH} 		;;
	"reload")
		reload_core_cron		;;
	"config"|"config-help")
		show_confhelp
		show_confexample		;;
	"?"|"/?")
		show_shorttips			;;
	*)
		show_help
		show_example			;;
	esac
	;;

"2")
	[ -z "${2//[ ]}" ] && {
		echo_yellow "need arguments.";echo
		exit 1
	}

	case "$1" in
	"?")
		show_shorttips		;;
	"list"|"l")
		if [ "$(read_plugin_section "$2")" == "$2" ]; then	### must be plugin
			list_plugin_status  "$2"
		else
			echo "plugin $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
		fi
			;;	
	"enable"|"e")
		if [ "$(read_plugin_section "$2")" == "$2" ]; then	### must be plugin
                        enable_plugin  "$2"
			rc=$?
			case "$rc" in
			"0")  echo "enable [$2] success [$(echo_green OK)]"				;;
			"2")  echo "enable [$2] skip [$(echo_yellow NoNeed: already enabled)]"		;;
			"5")  echo "enable [$2] warn [$(echo_yellow NoConf: config [enable] not found)]"
			      echo "trying to add config [enable] for [$2]"
			      add_eminfo_config "$2" "enable" "yes"
			      rc=$?
			      case "$rc" in
				"0") echo "enable [$2] success [$(echo_green OK)]" ;;
				*)   echo "enable [$2] failed [$(echo_red FAIL)], details in ${EMINFO_LOG}]" ;;
			      esac
													;;
			*)    echo "enable [$2] failed [$(echo_red FAIL)], details in ${EMINFO_LOG}" 	;;
			esac
			exit $rc;
		else
			echo "plugin $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
                fi
			;;
	"disable"|"d")
		if [ "$(read_plugin_section "$2")" == "$2" ]; then	### must be plugin
                        disable_plugin  "$2"
			rc=$?
			case "$rc" in
                        "0")  echo "disable [$2] success [$(echo_green OK)]"                                ;;
                        "2")  echo "disable [$2] skip [$(echo_yellow NoNeed: already disabled)]"            ;;
                        "5")  echo "disable [$2] skip [$(echo_yellow NoConf: config name [enable] not found)]"
			      echo "trying to add config [enable] for [$2]"
			      add_eminfo_config "$2" "enable" "no"
			      rc=$?
			      case "$rc" in
				"0") echo "disable [$2] success [$(echo_green OK)]" ;;
				*)   echo "disable [$2] failed [$(echo_red FAIL)], details in ${EMINFO_LOG}]" ;;
			      esac
			       										    ;;
                        *)    echo "disable [$2] failed [$(echo_red FAIL)], details in ${EMINFO_LOG}"       ;;
                        esac
			exit $rc;
		else
			echo "plugin $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
                fi
			;;
	"init"|"i")
		if [ "$2" == "all" -o "$2" == "a" ]; then
			init_plugin
		elif [ "$(read_plugin_section "$2")" == "$2" ]; then	### must be plugin
                        init_plugin  "$2"
		else
			echo "plugin $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
                fi
			;;
	"view"|"config-view"|"v")
		if [ "$2" == "all" -o "$2" == "a" ]; then
			view_extra_config "global"; echo;echo;	### output about eminfo section 
			view_base_config  "default"; echo;echo;
			view_extra_config "sendmail"; echo;echo;
			view_extra_config "postlog"; echo;echo;
			view_extra_config "takesnap"; echo;echo;
			for p in `list_inner_plugin_section`	### output inner plugins
			do
				view_extra_config "${p}"
				echo;echo;
			done
			for p in `list_plugin_section`		### output plugins
			do
				view_base_config  "${p}"
				view_extra_config "${p}"
				echo;echo;
			done
		elif [ "$(read_eminfo_section "$2")" == "$2" ]; then	### is eminfo section
			if [ "$2" == "default" ]; then
				view_base_config "$2"
			else
				view_extra_config "$2"
			fi
		elif [ "$(read_plugin_section "$2")" == "$2" ]; then	### must be plugin
                        view_base_config "$2"
			view_extra_config "$2"
		else
			echo "plugin $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
		fi
			;;
	"report"|"R")
		if [ "$2" == "all" -o "$2" == "a" ]; then
			. ${REPORT_SH} "all"
		elif [ "$(read_plugin_section "$2")" == "$2" ]; then 	### is plugin
			. ${REPORT_SH} "$2"
		elif [ "$(read_eminfo_section "$2")" == "$2" ]; then
			if [ ! -z "$( echo "${2}" | grep -E -o "^eminfo_" )" ]; then    ### is inner plugin
				. ${REPORT_SH} "$2"
			fi
		fi
			;;
	"run"|"r")
		if [ "$(read_plugin_section "$2")" == "$2" ]; then	### is plugin
			output=$( eval "${PLUGIN_DIR}/${2}" 2>&1 )
			[ "${#output}" -gt 131072 ] && output="${output:0:131000}}"
			. ${REPORT_SH} -f "$2" -i "${output}"
		elif [ "$(read_eminfo_section "$2")" == "$2" ]; then
			if [ ! -z "$( echo "${2}" | grep -E -o "^eminfo_" )" ]; then	### is inner plugin
				output=$( eval "${INNER_DIR}/${2}" 2>&1 )
				[ "${#output}" -gt 131072 ] && output="${output:0:131000}}"
			fi
			. ${REPORT_SH} -f "$2" -i "${output}"
		else
			echo "plugin $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
		fi
			;;
	"checkconf"|"c")
		if [ "$2" == "verbose" -o "$2" == "-v" ]; then
			. ${CHECKCONF_SH} "$2"
		fi
			;;
	"makedir"|"m")
		if [ "$2" == "c" -o "$2" == "-c" ]; then
			. ${MAKEDIR_SH} "-c"
		fi
			;;
	*)
		show_help
		show_example		;;
	esac
	;;
"3")
	[ -z "${2//[ ]}" -o -z "${3//[ ]}"  ] && {
		echo_yellow "need arguments.";echo
		exit 1
        }

	case "$1" in 
        "view"|"config-view"|"v")
                if [ "$(read_eminfo_section "$2")" == "$2" -o "$(read_plugin_section "$2")" == "$2" ]; then
			read_eminfo_config "$2" "$3"
			rc=$?
			exit ${rc}
                else
			echo "section $(echo_yellow "[$2]") : not registered in any config file."
                        exit 9;
                fi
                        ;;
	"config-del")
		if [ "$(read_eminfo_section "$2")" == "$2" -o "$(read_plugin_section "$2")" == "$2" ]; then
			del_eminfo_config "$2" "$3"
			rc=$?
			case "$rc" in
			"0") echo "delete [$2]-[$3] success [$(echo_green OK)]" 				;;
			"2") echo "delete [$2]-[$3] skip [$(echo_yellow NoNeed: config [$3] already not exists)]"	;;
			"9") echo "** $(echo_yellow "operation refused") **"					;;
			*)   echo "delete [$2]-[$3] failed [$(echo_red FAIL)], details in ${EMINFO_LOG}"    	;;
			esac
			exit ${rc}
		else
			echo "section $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
		fi
		;;
	*)
		show_help
		show_example
		;;
	esac
	;;
"4")
	[ -z "${2//[ ]}" -o -z "${3//[ ]}" -o -z "${4//[ ]}" ] && {
		echo_yellow "need arguments.";echo
		exit 1
	}

	case "$1" in
	"config-add"|"a")
		if [ "$(read_eminfo_section "$2")" == "$2" -o "$(read_plugin_section "$2")" == "$2" ]; then
			add_eminfo_config "$2" "$3" "$4"
			rc=$?
			case "$rc" in
			"0") echo "add [$2]-[$3]:[$4] success [$(echo_green OK)]"  		;;
			"2") echo "add [$2]-[$3]:[$4] skip [$(echo_yellow NoNeed: config [$3] already exists)]"		;;
			"9") echo "** $(echo_yellow "operation refused") **" 					  ;;
			*)   echo "add [$2]-[$3]:[$4] failed [$(echo_red FAIL)], details in ${EMINFO_LOG}"        ;;
			esac
			exit ${rc}
		else
			echo "section $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
		fi
		;;
	"config-update"|"u")
		if [ "$(read_eminfo_section "$2")" == "$2" -o "$(read_plugin_section "$2")" == "$2" ]; then
			update_eminfo_config "$2" "$3" "$4"
			rc=$?
			case "$rc" in
			"0") echo "update [$2]-[$3]:[$4] success [$(echo_green OK)]"					;;
			"2") echo "update [$2]-[$3]:[$4] skip [$(echo_yellow NoNeed: config [$3] is already what you want)]" ;;
			"5") echo "update [$2]-[$3]:[$4] warn [$(echo_yellow NoConf: config [$3] not found)]"	;;
			"9") echo "** $(echo_yellow "operation refused") **" 					;;
			*)   echo "update [$2]-[$3]:[$4] failed $(echo_red FAIL)], details in ${EMINFO_LOG}"		;;
			esac
			exit ${rc}
		else
			echo "section $(echo_yellow "[$2]") : not registered in any config file."
			exit 9;
		fi
		;;
	*)
		show_help
		show_example
		;;
	esac
	;;
*)
	show_help
	show_example
	;;
esac
