#!/bin/bash
#
#
# This Script Responsible for Posting Data to HTTPSQS Server.
#
#
# Usage:     ./postlog -f {plugin_name} -s {jobid} -i "${plugin_output_stuff}" -h "{handler_output_stuff}"  [-d]
#
# Example:   ./postlog -f check_sysload -s AlFt5885 -i "{crit}:{str}:{System Load Check CRITICAL | Load [13.8] >= UpLimit: [10]}"  -h "auto handler result here"  [-d]
#


BASE_DIR="/usr/local/eminfo"
if [ -f ${BASE_DIR}/bin/include -a -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# def help
#
show_usage(){
  echo "Usage:   ./${0##*/} -f {plugin_name} -s {jobid} -i \"{plugin_output_stuff}\"  -h \"{handler_output_stuff}\"  [-d] "
  echo "Example: ./${0##*/} -f check_sysload -s AlFt5885 -i \"{crit}:{str}:{System Load Check CRITICAL | Load [13.8] >= UpLimit: [10]}\" -h \"auto handler result here\"  [-d] "
  exit 1
}

# def genpost_asxml
# Convert plugin output and handler output to xmldata
# Output:	xml data for post
# Usage:	genpost_asxml {plugin} {jobid} {plugin_output} {handler_output}
# Exmaple:	genpost_asxml port 12345678 "{crit}:{str}:{title | summary | details: item1. ### item2. ### item3. ### }" "autohand"
#
genpost_asxml(){
  local plugin=$1 jobid=$2 content=$3 hd_content=$4
  local eminfo_id=$(get_eminfo_id)
  local gname=$(get_global_name)
  local jobts=$(date +%s)
  local enable=$(get_enable "${plugin}")
  local comment=$(get_comment "${plugin}")
  local frequency=$(get_frequency "${plugin}")
  local exec_tmout=$(get_exec_tmout "${plugin}")
  local maxerr_times=$(get_maxerr_times "${plugin}")
  local take_snapshot=$(get_action_type "${plugin}" take_snapshot)
  local mail_notify=$(get_action_type "${plugin}" mail_notify)
  local post_notify=$(get_action_type "${plugin}" post_notify)
  local mail_receviers=$(get_mail_receviers "${plugin}" mail_receviers)
  local attsnap_mail=$(get_attsnap_mail "${plugin}")
  local auto_handle=$(get_action_type "${plugin}" auto_handle)
  local auto_handler=$(get_auto_handler "${plugin}" auto_handler)
  local debug=$(get_debug "${plugin}")
  userdef2xml() {
	view_extra_config "$1" 1 | while read line
	do
		cname=$(echo -e "${line}" | awk '{gsub(" ","",$1);print $1;exit;}')
		cvalue=$(echo -e "${line}" | awk '{$1="";print}')
		echo -en "<$cname>$cvalue</$cname>\n"
	done
  }
  local userdef_asxml=$(userdef2xml "${plugin}")
  local plugin_handler_xmloutput=$( ${PLUTIL} format_phoutput_toxml "${content}" "${hd_content}" )

  cat <<-EOF
	<?xml version="1.0" encoding="UTF-8"?>
	<!-- eminfo postdata start -->
		<data>
		<id>${eminfo_id}</id>
		<hname>${gname}</hname>
		<jobid>${jobid}</jobid>
		<jobts>${jobts}</jobts>
		<result></result>
		<act></act>
		<config>
			<basic>
				<name>${plugin}</name>
				<enable>${enable}</enable>
				<comment>${comment}</comment>
				<freq>${frequency}</freq>
				<timeout>${exec_tmout}</timeout>
				<errnum>${maxerr_times}</errnum>
				<snap>${take_snapshot}</snap>
				<mail>${mail_notify}</mail>
				<post>${post_notify}</post>
				<recevier>${mail_receviers}</recevier>
				<attsnap>${attsnap_mail}</attsnap>
				<auto>${auto_handle}</auto>
				<handler>${auto_handler}</handler>
				<debug>${debug}</debug>
			</basic>
			<udef>
				${userdef_asxml}
			</udef>
		</config>
		${plugin_handler_xmloutput}
		<extra>
		</extra>
		</data>
	<!-- eminfo postdata end -->
EOF
}


### Main Body Begin...

[ "$1" == "-h" -o "$1" == "help" -o "$1" == "?" ] && show_usage

# read args
while getopts f:s:i:h:d opt
do
        case ${opt} in
        "f")
                plugin_name="${OPTARG}"   ;;
        "s")
                jobid="${OPTARG}"         ;;
	"i")
		LANG=C
		content="${OPTARG}"	  ;;
	"h")
		hd_content="${OPTARG}"	  ;;
	"d")
		DEBUG=1			  ;;
	*)	
		show_usage		  ;;
        esac
done

# set default
[ -z "${plugin_name}" ] && show_usage 	### plugin_name ~ ( {plugin_name} , NULL  )
[ -z "${jobid}" ] && show_usage		### jobid ~ ( NNNNNNNN , ovld , tmout )
[ -z "${content}" ] && show_usage
[ -z "${hd_content}" ] && hd_content="Nothing to do"
from="${plugin_name}.${jobid}"

write_log -f ${POSTLOG_LOG} ""
write_log -f ${POSTLOG_LOG} "[${from}]" "INFO: begin to postlog"


post_server=$(read_eminfo_config postlog post_server)
queue_name=$(read_eminfo_config postlog queue_name)
auth_pass=$(read_eminfo_config postlog auth_pass)
[ -z "${post_server}" -o -z "${queue_name}" -o -z "${auth_pass}" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"ERROR: configurations not complete:"\
		"[post_server,queue_name,auth_pass can't be empty]. EXIT"
  	exit 1
}
write_log -f ${POSTLOG_LOG} "[${from}]"\
	"INFO: set post_server=[${post_server}], queue_name=[${queue_name}], auth_pass=[XXXXXXXX]"

charset=$(read_eminfo_config postlog charset)
[ -z "${charset}" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"WARN: charset empty, set default charset=[utf-8]"
	charset="utf-8"
}

post_time_out=$(read_eminfo_config postlog post_time_out)
[ -z "${post_time_out}" -o ! -z "${post_time_out//[0-9]}" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"WARN: invalid post timeout [$post_time_out], set post_time_out=[10]"
	post_time_out="10"
}

post_server_port=$(read_eminfo_config postlog post_server_port)
[ -z "${post_server_port}" -o ! -z "${post_server_port//[0-9]}" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"WARN: invalid post_port [${post_server_port}], set post_server_port=[1218]"
	post_server_port="1218"
}

if [ -z "${DEBUG}" ]; then   ### if not specified from args, read from config file
	debug=$(read_eminfo_config postlog post_debug)
	if [ -z "${debug}" ]; then
		write_log -f ${POSTLOG_LOG} "[${from}]"\
			"WARN: debug empty, set debug=[no]"
		debug="no"
	else
		if [ "${debug}" != "yes" -a "${debug}" != "no" ]; then
			write_log -f ${POSTLOG_LOG} "[${from}]"\
				"WARN: invalid debug [${debug}], set debug=[no]"
			result="no"
		else
			write_log -f ${POSTLOG_LOG} "[${from}]"\
        			"INFO: set debug=[${debug}]"
		fi
	fi
else
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"INFO: set debug=[yes] as specified from argument"
	debug="yes"
fi


# check post host status
if [ -f "${POSTHOST_STATUS}" -a -s "${POSTHOST_STATUS}" ]; then
        status=$(/bin/awk '{print $1;exit}' "${POSTHOST_STATUS}" 2>&-)
        conn_details=$(/bin/awk '{$1="";print;exit;}' "${POSTHOST_STATUS}" 2>&-)
        if [ "${status}" != "0" ]; then
                write_log -f "${POSTLOG_LOG}" "[${from}]"\
                        "WARN: post host seems down, [${conn_details}], exit"
                exit 2;
        else
                write_log -f "${POSTLOG_LOG}" "[${from}]"\
                        "INFO: post host seems online, [${conn_details}], continue."
        fi
else
        write_log -f "${POSTLOG_LOG}" "[${from}]"\
                "INFO: post host status file not exist or empty, continue."
fi


# generate xml data, url-encoded data.
xml=$(genpost_asxml "${plugin_name}" "${jobid}" "${content}" "${hd_content}"|tr -d '\r\n')
if [ "${debug}" == "yes" ]; then			## => lead to huge postlog.log
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"DEBUG: job_id: [${jobid}]"
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"DEBUG: plugin_name: [${plugin_name}]"
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"DEBUG: plugin_output: [${content}]"
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"DEBUG: handler_output: [${hd_content}]"
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"DEBUG: xml_output: [${xml}]"
fi

postdata=$(echo -en "${xml}" | /usr/bin/od -t x1 -A n -w1000 | tr " " "%" | tr -d '\r\n')
if [ "${debug}" == "yes" ]; then			## => lead to huge postlog.log
	write_log -f ${POSTLOG_LOG} "[$from]"\
		"DEBUG: url_encoded data: [${postdata}]"
else
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"INFO: posting data ..."
fi

# curl -s: silient
result=$( /usr/bin/curl -k -s --connect-timeout ${post_time_out} -d "${postdata}" "https://${post_server}:${post_server_port}/?charset=${charset}&name=${queue_name}&opt=put&auth=${auth_pass}"  2>&1 )
if [ "$?" == "0" ]; then
	result="SUCCESS: ${result}"
else
	if [ -z "${result}" ]; then
		result="FAIL: return nothing, maybe timeout on connect [https://$post_server:$post_server_port]"
	else
		result="FAIL: ${result}"
	fi
fi

write_log -f ${POSTLOG_LOG} "[${from}]" "INFO: end to postLog. result "${result}""
write_log -f ${POSTLOG_LOG} ""
write_log -f ${POSTLOG_LOG} ""
